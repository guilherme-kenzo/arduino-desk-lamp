// Generated by SolidPython 1.1.1 on 2021-04-14 13:51:50


union() {
	difference() {
		cube(center = true, size = [200, 100, 30]);
		translate(v = [-100.0000000000, 0, 0]) {
			cube(center = true, size = [500, 20, 31]);
		}
	}
	translate(v = [0, 0, 140.0000000000]) {
		translate(v = [-90.0000000000, 0, 0]) {
			cube(center = true, size = [30, 20, 300]);
		}
	}
	cylinder(r = 50000);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import solid
import solid.utils

BASE_DIMENSIONS = [
    200, # X value
    100, # Y value
    30   # Z value
]

POLE_DIMENSIONS = [
    30,
    20,
    300
]

def make_shade():
    pass

def make_top():
    pass

def make_pole():
    pole = solid.cube(POLE_DIMENSIONS, center=True)
    pole = solid.utils.left((BASE_DIMENSIONS[0]/2) - 10)(pole)
    pole = solid.utils.up((((POLE_DIMENSIONS[2]/2) - BASE_DIMENSIONS[2]/2)) + 5)(pole)
    return pole

def make_base():
    base = solid.cube(BASE_DIMENSIONS, center=True)
    pole_hole = solid.cube([500, POLE_DIMENSIONS[1], BASE_DIMENSIONS[2]+1], center=True)
    pole_hole = solid.utils.left(BASE_DIMENSIONS[0]/2)(pole_hole)
    return base - pole_hole

def main():
    base = make_base()
    pole = make_pole()
    final_obj = base + pole + solid.cylinder(r=50000)
    solid.scad_render_to_file(final_obj, "model.scad")


if __name__ == "__main__":
    main() 
 
************************************************/
